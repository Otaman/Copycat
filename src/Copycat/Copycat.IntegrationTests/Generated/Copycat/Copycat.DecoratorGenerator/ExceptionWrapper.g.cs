// <auto-generated/>
using System.Diagnostics;
using Serilog;

namespace Copycat.IntegrationTests;
public partial class ExceptionWrapper
{
    /// <see cref = "ExceptionWrapper.WrapExceptions(Func{User}, Guid)"/>
    public Copycat.IntegrationTests.User GetUser(System.Guid id)
    {
        var sw = Stopwatch.StartNew();
        try
        {
            var user = _decorated.GetUser(id);
            _logger.Information("{Action} for user {Id} took {ElapsedMs} ms, current version is {Version}", nameof(GetUser), id, sw.ElapsedMilliseconds, user.Version);
            return user;
        }
        catch (Exception e)
        {
            _logger.Error(e, "Failed to execute {Action} for user {Id}, took {ElapsedMs} ms", nameof(GetUser), id, sw.ElapsedMilliseconds);
            throw new UserException(id, e.Message);
        }
    }

    /// <see cref = "ExceptionWrapper.WrapExceptions(Func{User}, Guid)"/>
    public Copycat.IntegrationTests.User CreateUser(System.Guid id, string name)
    {
        var sw = Stopwatch.StartNew();
        try
        {
            var user = _decorated.CreateUser(id, name);
            _logger.Information("{Action} for user {Id} took {ElapsedMs} ms, current version is {Version}", nameof(CreateUser), id, sw.ElapsedMilliseconds, user.Version);
            return user;
        }
        catch (Exception e)
        {
            _logger.Error(e, "Failed to execute {Action} for user {Id}, took {ElapsedMs} ms", nameof(CreateUser), id, sw.ElapsedMilliseconds);
            throw new UserException(id, e.Message);
        }
    }

    /// <see cref = "ExceptionWrapper.WrapExceptions(Func{User}, Guid)"/>
    public Copycat.IntegrationTests.User UpdateUserName(System.Guid id, string name)
    {
        var sw = Stopwatch.StartNew();
        try
        {
            var user = _decorated.UpdateUserName(id, name);
            _logger.Information("{Action} for user {Id} took {ElapsedMs} ms, current version is {Version}", nameof(UpdateUserName), id, sw.ElapsedMilliseconds, user.Version);
            return user;
        }
        catch (Exception e)
        {
            _logger.Error(e, "Failed to execute {Action} for user {Id}, took {ElapsedMs} ms", nameof(UpdateUserName), id, sw.ElapsedMilliseconds);
            throw new UserException(id, e.Message);
        }
    }
}