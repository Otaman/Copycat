// <auto-generated/>
using System.Collections;

namespace Copycat.IntegrationTests;
public partial class DecorateDictionary<TKey, TValue>
{
    private System.Collections.Generic.IDictionary<TKey, TValue> _decorated;
    public DecorateDictionary(System.Collections.Generic.IDictionary<TKey, TValue> decorated)
    {
        _decorated = decorated;
    }

    public System.Collections.Generic.ICollection<TKey> Keys { get => _decorated.Keys; }

    public System.Collections.Generic.ICollection<TValue> Values { get => _decorated.Values; }

    public int Count { get => _decorated.Count; }

    public bool IsReadOnly { get => _decorated.IsReadOnly; }

    public TValue this[TKey key] { get => _decorated[key]; set => _decorated[key] = value; }

    public void Add(TKey key, TValue value) => _decorated.Add(key, value);
    public bool ContainsKey(TKey key) => _decorated.ContainsKey(key);
    public bool Remove(TKey key) => _decorated.Remove(key);
    public bool TryGetValue(TKey key, out TValue value) => _decorated.TryGetValue(key, out value);
    public void Add(System.Collections.Generic.KeyValuePair<TKey, TValue> item) => _decorated.Add(item);
    public void Clear() => _decorated.Clear();
    public bool Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> item) => _decorated.Contains(item);
    public void CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) => _decorated.CopyTo(array, arrayIndex);
    public bool Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> item) => _decorated.Remove(item);
    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator() => _decorated.GetEnumerator();
}