// <auto-generated/>
using Serilog;

namespace Copycat.IntegrationTests;
public partial class RetryWrapperWithBase
{
    private Copycat.IntegrationTests.ISomeService _decorated;
    public RetryWrapperWithBase(Copycat.IntegrationTests.ISomeService decorated, ILogger logger) : base(logger)
    {
        _decorated = decorated;
    }

    /// <see cref = "ResiliencyBase.Retry{T}(Func{Task{T}})"/>
    public async System.Threading.Tasks.Task<decimal> GetRate(string currency)
    {
        var retryCount = 0;
        while (true)
        {
            try
            {
                return await _decorated.GetRate(currency);
            }
            catch (Exception e)
            {
                if (retryCount++ >= 3)
                    throw;
                Logger.Warning("Retry {Action} {RetryCount} due to {Message}", nameof(GetRate), retryCount, e.Message);
            }
        }
    }

    /// <see cref = "ResiliencyBase.Retry{T}(Func{Task{T}})"/>
    public async System.Threading.Tasks.Task<decimal> GetRate(string currency, System.DateTime date)
    {
        var retryCount = 0;
        while (true)
        {
            try
            {
                return await _decorated.GetRate(currency, date);
            }
            catch (Exception e)
            {
                if (retryCount++ >= 3)
                    throw;
                Logger.Warning("Retry {Action} {RetryCount} due to {Message}", nameof(GetRate), retryCount, e.Message);
            }
        }
    }
}